// This code contains NVIDIA Confidential Information and is disclosed to you
// under a form of NVIDIA software license agreement provided separately to you.
//
// Notice
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and
// any modifications thereto. Any use, reproduction, disclosure, or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA Corporation is strictly prohibited.
//
// ALL NVIDIA DESIGN SPECIFICATIONS, CODE ARE PROVIDED "AS IS.". NVIDIA MAKES
// NO WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO
// THE MATERIALS, AND EXPRESSLY DISCLAIMS ALL IMPLIED WARRANTIES OF NONINFRINGEMENT,
// MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE.
//
// Information and code furnished is believed to be accurate and reliable.
// However, NVIDIA Corporation assumes no responsibility for the consequences of use of such
// information or for any infringement of patents or other rights of third parties that may
// result from its use. No license is granted by implication or otherwise under any patent
// or patent rights of NVIDIA Corporation. Details are subject to change without notice.
// This code supersedes and replaces all information previously supplied.
// NVIDIA Corporation products are not authorized for use as critical
// components in life support devices or systems without express written approval of
// NVIDIA Corporation.
//
// Copyright (c) 2008-2015 NVIDIA Corporation. All rights reserved.

// This file was generated by NvParameterized/scripts/GenParameterized.pl


#include "TurbulenceFSDebugRenderParams_0p0.h"
#include <string.h>
#include <stdlib.h>

using namespace NvParameterized;

namespace nvidia
{
namespace parameterized
{

using namespace TurbulenceFSDebugRenderParams_0p0NS;

const char* const TurbulenceFSDebugRenderParams_0p0Factory::vptr =
    NvParameterized::getVptr<TurbulenceFSDebugRenderParams_0p0, TurbulenceFSDebugRenderParams_0p0::ClassAlignment>();

const uint32_t NumParamDefs = 30;
static NvParameterized::DefinitionImpl* ParamDefTable; // now allocated in buildTree [NumParamDefs];


static const size_t ParamLookupChildrenTable[] =
{
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 22, 23, 26, 27, 28,
	29, 19, 20, 21, 24, 25,
};

#define TENUM(type) nvidia::##type
#define CHILDREN(index) &ParamLookupChildrenTable[index]
static const NvParameterized::ParamLookupNode ParamLookupTable[NumParamDefs] =
{
	{ TYPE_STRUCT, false, 0, CHILDREN(0), 24 },
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->VISUALIZE_TURBULENCE_FS_ACTOR), NULL, 0 }, // VISUALIZE_TURBULENCE_FS_ACTOR
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->VISUALIZE_HEAT_SOURCE_ACTOR), NULL, 0 }, // VISUALIZE_HEAT_SOURCE_ACTOR
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->VISUALIZE_SUBSTANCE_SOURCE_ACTOR), NULL, 0 }, // VISUALIZE_SUBSTANCE_SOURCE_ACTOR
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->VISUALIZE_VELOCITY_SOURCE_ACTOR), NULL, 0 }, // VISUALIZE_VELOCITY_SOURCE_ACTOR
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->VISUALIZE_FLAME_EMITTER_ACTOR), NULL, 0 }, // VISUALIZE_FLAME_EMITTER_ACTOR
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->VISUALIZE_TURBULENCE_FS_VELOCITY), NULL, 0 }, // VISUALIZE_TURBULENCE_FS_VELOCITY
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->VISUALIZE_TURBULENCE_FS_BBOX), NULL, 0 }, // VISUALIZE_TURBULENCE_FS_BBOX
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->VISUALIZE_TURBULENCE_FS_ACTOR_NAME), NULL, 0 }, // VISUALIZE_TURBULENCE_FS_ACTOR_NAME
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->VISUALIZE_TURBULENCE_FS_VELOCITY_FIELD), NULL, 0 }, // VISUALIZE_TURBULENCE_FS_VELOCITY_FIELD
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->TURBULENCE_FS_VELOCITY_FIELD_SCALE), NULL, 0 }, // TURBULENCE_FS_VELOCITY_FIELD_SCALE
	{ TYPE_U32, false, (size_t)(&((ParametersStruct*)0)->TURBULENCE_FS_VELOCITY_FIELD_SPACING), NULL, 0 }, // TURBULENCE_FS_VELOCITY_FIELD_SPACING
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->VISUALIZE_TURBULENCE_FS_TEMPERATURE_FIELD), NULL, 0 }, // VISUALIZE_TURBULENCE_FS_TEMPERATURE_FIELD
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->VISUALIZE_TURBULENCE_FS_PRESSURE_FIELD), NULL, 0 }, // VISUALIZE_TURBULENCE_FS_PRESSURE_FIELD
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->VISUALIZE_TURBULENCE_FS_DENSITY_FIELD), NULL, 0 }, // VISUALIZE_TURBULENCE_FS_DENSITY_FIELD
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->TURBULENCE_FS_SCALAR_FIELD_SCALE), NULL, 0 }, // TURBULENCE_FS_SCALAR_FIELD_SCALE
	{ TYPE_U32, false, (size_t)(&((ParametersStruct*)0)->TURBULENCE_FS_SCALAR_FIELD_SPACING), NULL, 0 }, // TURBULENCE_FS_SCALAR_FIELD_SPACING
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->VISUALIZE_TURBULENCE_FS_STREAMLINES), NULL, 0 }, // VISUALIZE_TURBULENCE_FS_STREAMLINES
	{ TYPE_STRUCT, false, (size_t)(&((ParametersStruct*)0)->TURBULENCE_FS_STREAMLINES), CHILDREN(24), 3 }, // TURBULENCE_FS_STREAMLINES
	{ TYPE_F32, false, (size_t)(&((StreamlineParams_Type*)0)->tmax), NULL, 0 }, // TURBULENCE_FS_STREAMLINES.tmax
	{ TYPE_F32, false, (size_t)(&((StreamlineParams_Type*)0)->tstep), NULL, 0 }, // TURBULENCE_FS_STREAMLINES.tstep
	{ TYPE_VEC3, false, (size_t)(&((StreamlineParams_Type*)0)->grid), NULL, 0 }, // TURBULENCE_FS_STREAMLINES.grid
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->VISUALIZE_TURBULENCE_FS_PLANE), NULL, 0 }, // VISUALIZE_TURBULENCE_FS_PLANE
	{ TYPE_STRUCT, false, (size_t)(&((ParametersStruct*)0)->TURBULENCE_FS_PLANE), CHILDREN(27), 2 }, // TURBULENCE_FS_PLANE
	{ TYPE_VEC3, false, (size_t)(&((PlaneParams_Type*)0)->normal), NULL, 0 }, // TURBULENCE_FS_PLANE.normal
	{ TYPE_F32, false, (size_t)(&((PlaneParams_Type*)0)->offset), NULL, 0 }, // TURBULENCE_FS_PLANE.offset
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->VISUALIZE_TURBULENCE_FS_GRID), NULL, 0 }, // VISUALIZE_TURBULENCE_FS_GRID
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->VISUALIZE_TURBULENCE_FS_LOD), NULL, 0 }, // VISUALIZE_TURBULENCE_FS_LOD
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->VISUALIZE_TURBULENCE_FS_POSE), NULL, 0 }, // VISUALIZE_TURBULENCE_FS_POSE
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->TURBULENCE_FS_LOD), NULL, 0 }, // TURBULENCE_FS_LOD
};


bool TurbulenceFSDebugRenderParams_0p0::mBuiltFlag = false;
NvParameterized::MutexType TurbulenceFSDebugRenderParams_0p0::mBuiltFlagMutex;

TurbulenceFSDebugRenderParams_0p0::TurbulenceFSDebugRenderParams_0p0(NvParameterized::Traits* traits, void* buf, int32_t* refCount) :
	NvParameters(traits, buf, refCount)
{
	//mParameterizedTraits->registerFactory(className(), &TurbulenceFSDebugRenderParams_0p0FactoryInst);

	if (!buf) //Do not init data if it is inplace-deserialized
	{
		initDynamicArrays();
		initStrings();
		initReferences();
		initDefaults();
	}
}

TurbulenceFSDebugRenderParams_0p0::~TurbulenceFSDebugRenderParams_0p0()
{
	freeStrings();
	freeReferences();
	freeDynamicArrays();
}

void TurbulenceFSDebugRenderParams_0p0::destroy()
{
	// We cache these fields here to avoid overwrite in destructor
	bool doDeallocateSelf = mDoDeallocateSelf;
	NvParameterized::Traits* traits = mParameterizedTraits;
	int32_t* refCount = mRefCount;
	void* buf = mBuffer;

	this->~TurbulenceFSDebugRenderParams_0p0();

	NvParameters::destroy(this, traits, doDeallocateSelf, refCount, buf);
}

const NvParameterized::DefinitionImpl* TurbulenceFSDebugRenderParams_0p0::getParameterDefinitionTree(void)
{
	if (!mBuiltFlag) // Double-checked lock
	{
		NvParameterized::MutexType::ScopedLock lock(mBuiltFlagMutex);
		if (!mBuiltFlag)
		{
			buildTree();
		}
	}

	return(&ParamDefTable[0]);
}

const NvParameterized::DefinitionImpl* TurbulenceFSDebugRenderParams_0p0::getParameterDefinitionTree(void) const
{
	TurbulenceFSDebugRenderParams_0p0* tmpParam = const_cast<TurbulenceFSDebugRenderParams_0p0*>(this);

	if (!mBuiltFlag) // Double-checked lock
	{
		NvParameterized::MutexType::ScopedLock lock(mBuiltFlagMutex);
		if (!mBuiltFlag)
		{
			tmpParam->buildTree();
		}
	}

	return(&ParamDefTable[0]);
}

NvParameterized::ErrorType TurbulenceFSDebugRenderParams_0p0::getParameterHandle(const char* long_name, Handle& handle) const
{
	ErrorType Ret = NvParameters::getParameterHandle(long_name, handle);
	if (Ret != ERROR_NONE)
	{
		return(Ret);
	}

	size_t offset;
	void* ptr;

	getVarPtr(handle, ptr, offset);

	if (ptr == NULL)
	{
		return(ERROR_INDEX_OUT_OF_RANGE);
	}

	return(ERROR_NONE);
}

NvParameterized::ErrorType TurbulenceFSDebugRenderParams_0p0::getParameterHandle(const char* long_name, Handle& handle)
{
	ErrorType Ret = NvParameters::getParameterHandle(long_name, handle);
	if (Ret != ERROR_NONE)
	{
		return(Ret);
	}

	size_t offset;
	void* ptr;

	getVarPtr(handle, ptr, offset);

	if (ptr == NULL)
	{
		return(ERROR_INDEX_OUT_OF_RANGE);
	}

	return(ERROR_NONE);
}

void TurbulenceFSDebugRenderParams_0p0::getVarPtr(const Handle& handle, void*& ptr, size_t& offset) const
{
	ptr = getVarPtrHelper(&ParamLookupTable[0], const_cast<TurbulenceFSDebugRenderParams_0p0::ParametersStruct*>(&parameters()), handle, offset);
}


/* Dynamic Handle Indices */

void TurbulenceFSDebugRenderParams_0p0::freeParameterDefinitionTable(NvParameterized::Traits* traits)
{
	if (!traits)
	{
		return;
	}

	if (!mBuiltFlag) // Double-checked lock
	{
		return;
	}

	NvParameterized::MutexType::ScopedLock lock(mBuiltFlagMutex);

	if (!mBuiltFlag)
	{
		return;
	}

	for (uint32_t i = 0; i < NumParamDefs; ++i)
	{
		ParamDefTable[i].~DefinitionImpl();
	}

	traits->free(ParamDefTable);

	mBuiltFlag = false;
}

#define PDEF_PTR(index) (&ParamDefTable[index])

void TurbulenceFSDebugRenderParams_0p0::buildTree(void)
{

	uint32_t allocSize = sizeof(NvParameterized::DefinitionImpl) * NumParamDefs;
	ParamDefTable = (NvParameterized::DefinitionImpl*)(mParameterizedTraits->alloc(allocSize));
	memset(ParamDefTable, 0, allocSize);

	for (uint32_t i = 0; i < NumParamDefs; ++i)
	{
		NV_PARAM_PLACEMENT_NEW(ParamDefTable + i, NvParameterized::DefinitionImpl)(*mParameterizedTraits);
	}

	// Initialize DefinitionImpl node: nodeIndex=0, longName=""
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[0];
		ParamDef->init("", TYPE_STRUCT, "STRUCT", true);






	}

	// Initialize DefinitionImpl node: nodeIndex=1, longName="VISUALIZE_TURBULENCE_FS_ACTOR"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[1];
		ParamDef->init("VISUALIZE_TURBULENCE_FS_ACTOR", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Enables/Disables visualization of all turbulence actors", true);
		ParamDefTable[1].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=2, longName="VISUALIZE_HEAT_SOURCE_ACTOR"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[2];
		ParamDef->init("VISUALIZE_HEAT_SOURCE_ACTOR", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Enables/Disables visualization of all heat source actors", true);
		ParamDefTable[2].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=3, longName="VISUALIZE_SUBSTANCE_SOURCE_ACTOR"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[3];
		ParamDef->init("VISUALIZE_SUBSTANCE_SOURCE_ACTOR", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Enables/Disables visualization of all heat source actors", true);
		ParamDefTable[3].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=4, longName="VISUALIZE_VELOCITY_SOURCE_ACTOR"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[4];
		ParamDef->init("VISUALIZE_VELOCITY_SOURCE_ACTOR", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Enables/Disables visualization of all velocity source actors", true);
		ParamDefTable[4].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=5, longName="VISUALIZE_FLAME_EMITTER_ACTOR"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[5];
		ParamDef->init("VISUALIZE_FLAME_EMITTER_ACTOR", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Enables/Disables visualization of all flame emitter actors", true);
		ParamDefTable[5].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=6, longName="VISUALIZE_TURBULENCE_FS_VELOCITY"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[6];
		ParamDef->init("VISUALIZE_TURBULENCE_FS_VELOCITY", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Draws a ray for the grid's velocity", true);
		ParamDefTable[6].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=7, longName="VISUALIZE_TURBULENCE_FS_BBOX"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[7];
		ParamDef->init("VISUALIZE_TURBULENCE_FS_BBOX", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Draw a bounding box for the turbulence grid", true);
		ParamDefTable[7].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=8, longName="VISUALIZE_TURBULENCE_FS_ACTOR_NAME"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[8];
		ParamDef->init("VISUALIZE_TURBULENCE_FS_ACTOR_NAME", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Displays the name of the turbulence actor", true);
		ParamDefTable[8].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=9, longName="VISUALIZE_TURBULENCE_FS_VELOCITY_FIELD"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[9];
		ParamDef->init("VISUALIZE_TURBULENCE_FS_VELOCITY_FIELD", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Draws shaded lines originating from the simulation grid centers and extending in the direction of the local velocity", true);
		ParamDefTable[9].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=10, longName="TURBULENCE_FS_VELOCITY_FIELD_SCALE"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[10];
		ParamDef->init("TURBULENCE_FS_VELOCITY_FIELD_SCALE", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Controls the size of the velocity vectors", true);
		ParamDefTable[10].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=11, longName="TURBULENCE_FS_VELOCITY_FIELD_SPACING"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[11];
		ParamDef->init("TURBULENCE_FS_VELOCITY_FIELD_SPACING", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Controls the grid spacing (density) of the velocity samples", true);
		ParamDefTable[11].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=12, longName="VISUALIZE_TURBULENCE_FS_TEMPERATURE_FIELD"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[12];
		ParamDef->init("VISUALIZE_TURBULENCE_FS_TEMPERATURE_FIELD", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Determine the temperature for visualization", true);
		ParamDefTable[12].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=13, longName="VISUALIZE_TURBULENCE_FS_PRESSURE_FIELD"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[13];
		ParamDef->init("VISUALIZE_TURBULENCE_FS_PRESSURE_FIELD", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Determine the pressure for visualization", true);
		ParamDefTable[13].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=14, longName="VISUALIZE_TURBULENCE_FS_DENSITY_FIELD"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[14];
		ParamDef->init("VISUALIZE_TURBULENCE_FS_DENSITY_FIELD", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Determine the density for visualization", true);
		ParamDefTable[14].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=15, longName="TURBULENCE_FS_SCALAR_FIELD_SCALE"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[15];
		ParamDef->init("TURBULENCE_FS_SCALAR_FIELD_SCALE", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Controls the size of debug spheres for scalar field", true);
		ParamDefTable[15].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=16, longName="TURBULENCE_FS_SCALAR_FIELD_SPACING"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[16];
		ParamDef->init("TURBULENCE_FS_SCALAR_FIELD_SPACING", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Controls the grid spacing (density) of scalar field samples", true);
		ParamDefTable[16].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=17, longName="VISUALIZE_TURBULENCE_FS_STREAMLINES"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[17];
		ParamDef->init("VISUALIZE_TURBULENCE_FS_STREAMLINES", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Draws the streamlines as white curved lines", true);
		ParamDefTable[17].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=18, longName="TURBULENCE_FS_STREAMLINES"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[18];
		ParamDef->init("TURBULENCE_FS_STREAMLINES", TYPE_STRUCT, "StreamlineParams", true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "A structure with parameters for rendering the field streamlines", true);
		ParamDefTable[18].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=19, longName="TURBULENCE_FS_STREAMLINES.tmax"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[19];
		ParamDef->init("tmax", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Determines the number of points in each streamline, using the formula npoints = (int)(_tmax / _tstep)", true);
		ParamDefTable[19].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=20, longName="TURBULENCE_FS_STREAMLINES.tstep"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[20];
		ParamDef->init("tstep", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "The step size for the number of points in the streamline", true);
		ParamDefTable[20].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=21, longName="TURBULENCE_FS_STREAMLINES.grid"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[21];
		ParamDef->init("grid", TYPE_VEC3, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Sets the number of stream lines in the x, y, and z dimension", true);
		ParamDefTable[21].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=22, longName="VISUALIZE_TURBULENCE_FS_PLANE"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[22];
		ParamDef->init("VISUALIZE_TURBULENCE_FS_PLANE", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Draws the intersecting plane in the field's bounding box", true);
		ParamDefTable[22].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=23, longName="TURBULENCE_FS_PLANE"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[23];
		ParamDef->init("TURBULENCE_FS_PLANE", TYPE_STRUCT, "PlaneParams", true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "A structure with parameters for rendering the intersecting plane", true);
		ParamDefTable[23].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=24, longName="TURBULENCE_FS_PLANE.normal"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[24];
		ParamDef->init("normal", TYPE_VEC3, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Sets the normal for the plane", true);
		ParamDefTable[24].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=25, longName="TURBULENCE_FS_PLANE.offset"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[25];
		ParamDef->init("offset", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Sets the offset for the plane from the center of the grid", true);
		ParamDefTable[25].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=26, longName="VISUALIZE_TURBULENCE_FS_GRID"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[26];
		ParamDef->init("VISUALIZE_TURBULENCE_FS_GRID", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Draws the intersection of the simulation grid on the plane", true);
		ParamDefTable[26].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=27, longName="VISUALIZE_TURBULENCE_FS_LOD"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[27];
		ParamDef->init("VISUALIZE_TURBULENCE_FS_LOD", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Draws the LOD sphere", true);
		ParamDefTable[27].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=28, longName="VISUALIZE_TURBULENCE_FS_POSE"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[28];
		ParamDef->init("VISUALIZE_TURBULENCE_FS_POSE", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "For visualizing the position of the field itself. Draws arrows which represent axes. Blue arrow stands for Z axis, green - for Y and red - X.", true);
		ParamDefTable[28].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=29, longName="TURBULENCE_FS_LOD"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[29];
		ParamDef->init("TURBULENCE_FS_LOD", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Draws the LOD value for the turbulence simulation", true);
		ParamDefTable[29].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// SetChildren for: nodeIndex=0, longName=""
	{
		static Definition* Children[24];
		Children[0] = PDEF_PTR(1);
		Children[1] = PDEF_PTR(2);
		Children[2] = PDEF_PTR(3);
		Children[3] = PDEF_PTR(4);
		Children[4] = PDEF_PTR(5);
		Children[5] = PDEF_PTR(6);
		Children[6] = PDEF_PTR(7);
		Children[7] = PDEF_PTR(8);
		Children[8] = PDEF_PTR(9);
		Children[9] = PDEF_PTR(10);
		Children[10] = PDEF_PTR(11);
		Children[11] = PDEF_PTR(12);
		Children[12] = PDEF_PTR(13);
		Children[13] = PDEF_PTR(14);
		Children[14] = PDEF_PTR(15);
		Children[15] = PDEF_PTR(16);
		Children[16] = PDEF_PTR(17);
		Children[17] = PDEF_PTR(18);
		Children[18] = PDEF_PTR(22);
		Children[19] = PDEF_PTR(23);
		Children[20] = PDEF_PTR(26);
		Children[21] = PDEF_PTR(27);
		Children[22] = PDEF_PTR(28);
		Children[23] = PDEF_PTR(29);

		ParamDefTable[0].setChildren(Children, 24);
	}

	// SetChildren for: nodeIndex=18, longName="TURBULENCE_FS_STREAMLINES"
	{
		static Definition* Children[3];
		Children[0] = PDEF_PTR(19);
		Children[1] = PDEF_PTR(20);
		Children[2] = PDEF_PTR(21);

		ParamDefTable[18].setChildren(Children, 3);
	}

	// SetChildren for: nodeIndex=23, longName="TURBULENCE_FS_PLANE"
	{
		static Definition* Children[2];
		Children[0] = PDEF_PTR(24);
		Children[1] = PDEF_PTR(25);

		ParamDefTable[23].setChildren(Children, 2);
	}

	mBuiltFlag = true;

}
void TurbulenceFSDebugRenderParams_0p0::initStrings(void)
{
}

void TurbulenceFSDebugRenderParams_0p0::initDynamicArrays(void)
{
}

void TurbulenceFSDebugRenderParams_0p0::initDefaults(void)
{

	freeStrings();
	freeReferences();
	freeDynamicArrays();
	VISUALIZE_TURBULENCE_FS_ACTOR = bool(true);
	VISUALIZE_HEAT_SOURCE_ACTOR = bool(false);
	VISUALIZE_SUBSTANCE_SOURCE_ACTOR = bool(false);
	VISUALIZE_VELOCITY_SOURCE_ACTOR = bool(false);
	VISUALIZE_FLAME_EMITTER_ACTOR = bool(false);
	VISUALIZE_TURBULENCE_FS_VELOCITY = bool(false);
	VISUALIZE_TURBULENCE_FS_BBOX = bool(false);
	VISUALIZE_TURBULENCE_FS_ACTOR_NAME = bool(false);
	VISUALIZE_TURBULENCE_FS_VELOCITY_FIELD = bool(false);
	TURBULENCE_FS_VELOCITY_FIELD_SCALE = float(1.0);
	TURBULENCE_FS_VELOCITY_FIELD_SPACING = uint32_t(4);
	VISUALIZE_TURBULENCE_FS_TEMPERATURE_FIELD = bool(false);
	VISUALIZE_TURBULENCE_FS_PRESSURE_FIELD = bool(false);
	VISUALIZE_TURBULENCE_FS_DENSITY_FIELD = bool(false);
	TURBULENCE_FS_SCALAR_FIELD_SCALE = float(0.1);
	TURBULENCE_FS_SCALAR_FIELD_SPACING = uint32_t(4);
	VISUALIZE_TURBULENCE_FS_STREAMLINES = bool(false);
	TURBULENCE_FS_STREAMLINES.tmax = float(5.0f);
	TURBULENCE_FS_STREAMLINES.tstep = float(0.01f);
	TURBULENCE_FS_STREAMLINES.grid = physx::PxVec3(3, 3, 3);
	VISUALIZE_TURBULENCE_FS_PLANE = bool(false);
	TURBULENCE_FS_PLANE.normal = physx::PxVec3(0.0f, 1.0f, 0.0f);
	TURBULENCE_FS_PLANE.offset = float(0.0f);
	VISUALIZE_TURBULENCE_FS_GRID = bool(false);
	VISUALIZE_TURBULENCE_FS_LOD = bool(false);
	VISUALIZE_TURBULENCE_FS_POSE = bool(false);
	TURBULENCE_FS_LOD = float(0.0);

	initDynamicArrays();
	initStrings();
	initReferences();
}

void TurbulenceFSDebugRenderParams_0p0::initReferences(void)
{
}

void TurbulenceFSDebugRenderParams_0p0::freeDynamicArrays(void)
{
}

void TurbulenceFSDebugRenderParams_0p0::freeStrings(void)
{
}

void TurbulenceFSDebugRenderParams_0p0::freeReferences(void)
{
}

} // namespace parameterized
} // namespace nvidia
