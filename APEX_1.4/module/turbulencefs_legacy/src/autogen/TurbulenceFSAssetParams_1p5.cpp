// This code contains NVIDIA Confidential Information and is disclosed to you
// under a form of NVIDIA software license agreement provided separately to you.
//
// Notice
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and
// any modifications thereto. Any use, reproduction, disclosure, or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA Corporation is strictly prohibited.
//
// ALL NVIDIA DESIGN SPECIFICATIONS, CODE ARE PROVIDED "AS IS.". NVIDIA MAKES
// NO WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO
// THE MATERIALS, AND EXPRESSLY DISCLAIMS ALL IMPLIED WARRANTIES OF NONINFRINGEMENT,
// MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE.
//
// Information and code furnished is believed to be accurate and reliable.
// However, NVIDIA Corporation assumes no responsibility for the consequences of use of such
// information or for any infringement of patents or other rights of third parties that may
// result from its use. No license is granted by implication or otherwise under any patent
// or patent rights of NVIDIA Corporation. Details are subject to change without notice.
// This code supersedes and replaces all information previously supplied.
// NVIDIA Corporation products are not authorized for use as critical
// components in life support devices or systems without express written approval of
// NVIDIA Corporation.
//
// Copyright (c) 2008-2015 NVIDIA Corporation. All rights reserved.

// This file was generated by NvParameterized/scripts/GenParameterized.pl


#include "TurbulenceFSAssetParams_1p5.h"
#include <string.h>
#include <stdlib.h>

using namespace NvParameterized;

namespace nvidia
{
namespace parameterized
{

using namespace TurbulenceFSAssetParams_1p5NS;

const char* const TurbulenceFSAssetParams_1p5Factory::vptr =
    NvParameterized::getVptr<TurbulenceFSAssetParams_1p5, TurbulenceFSAssetParams_1p5::ClassAlignment>();

const uint32_t NumParamDefs = 62;
static NvParameterized::DefinitionImpl* ParamDefTable; // now allocated in buildTree [NumParamDefs];


static const size_t ParamLookupChildrenTable[] =
{
	1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,
	24, 25, 26, 27, 32, 33, 37, 38, 43, 44, 45, 46, 47, 61, 28, 29, 30, 31, 34, 35, 36,
	39, 40, 41, 42, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,
};

#define TENUM(type) nvidia::##type
#define CHILDREN(index) &ParamLookupChildrenTable[index]
static const NvParameterized::ParamLookupNode ParamLookupTable[NumParamDefs] =
{
	{ TYPE_STRUCT, false, 0, CHILDREN(0), 37 },
	{ TYPE_ENUM, false, (size_t)(&((ParametersStruct*)0)->gridXSize), NULL, 0 }, // gridXSize
	{ TYPE_ENUM, false, (size_t)(&((ParametersStruct*)0)->gridYSize), NULL, 0 }, // gridYSize
	{ TYPE_ENUM, false, (size_t)(&((ParametersStruct*)0)->gridZSize), NULL, 0 }, // gridZSize
	{ TYPE_VEC3, false, (size_t)(&((ParametersStruct*)0)->gridSizeWorld), NULL, 0 }, // gridSizeWorld
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->updatesPerFrame), NULL, 0 }, // updatesPerFrame
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->angularVelocityMultiplier), NULL, 0 }, // angularVelocityMultiplier
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->angularVelocityClamp), NULL, 0 }, // angularVelocityClamp
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->linearVelocityMultiplier), NULL, 0 }, // linearVelocityMultiplier
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->linearVelocityClamp), NULL, 0 }, // linearVelocityClamp
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->velocityFieldFadeTime), NULL, 0 }, // velocityFieldFadeTime
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->velocityFieldFadeDelay), NULL, 0 }, // velocityFieldFadeDelay
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->velocityFieldFadeIntensity), NULL, 0 }, // velocityFieldFadeIntensity
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->boundaryFadePercentage), NULL, 0 }, // boundaryFadePercentage
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->boundarySizePercentage), NULL, 0 }, // boundarySizePercentage
	{ TYPE_STRING, false, (size_t)(&((ParametersStruct*)0)->collisionFilterDataName), NULL, 0 }, // collisionFilterDataName
	{ TYPE_STRING, false, (size_t)(&((ParametersStruct*)0)->fieldBoundaryFilterDataName), NULL, 0 }, // fieldBoundaryFilterDataName
	{ TYPE_STRING, false, (size_t)(&((ParametersStruct*)0)->fieldSamplerFilterDataName), NULL, 0 }, // fieldSamplerFilterDataName
	{ TYPE_U32, false, (size_t)(&((ParametersStruct*)0)->maxCollidingObjects), NULL, 0 }, // maxCollidingObjects
	{ TYPE_U32, false, (size_t)(&((ParametersStruct*)0)->maxVelocitySources), NULL, 0 }, // maxVelocitySources
	{ TYPE_U32, false, (size_t)(&((ParametersStruct*)0)->maxHeatSources), NULL, 0 }, // maxHeatSources
	{ TYPE_U32, false, (size_t)(&((ParametersStruct*)0)->maxSubstanceSources), NULL, 0 }, // maxSubstanceSources
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->dragCoeff), NULL, 0 }, // dragCoeff
	{ TYPE_VEC3, false, (size_t)(&((ParametersStruct*)0)->externalVelocity), NULL, 0 }, // externalVelocity
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->fieldVelocityMultiplier), NULL, 0 }, // fieldVelocityMultiplier
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->fieldVelocityWeight), NULL, 0 }, // fieldVelocityWeight
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->useHeat), NULL, 0 }, // useHeat
	{ TYPE_STRUCT, false, (size_t)(&((ParametersStruct*)0)->heatParams), CHILDREN(37), 4 }, // heatParams
	{ TYPE_F32, false, (size_t)(&((HeatParams_Type*)0)->temperatureBasedForceMultiplier), NULL, 0 }, // heatParams.temperatureBasedForceMultiplier
	{ TYPE_F32, false, (size_t)(&((HeatParams_Type*)0)->ambientTemperature), NULL, 0 }, // heatParams.ambientTemperature
	{ TYPE_VEC3, false, (size_t)(&((HeatParams_Type*)0)->heatForceDirection), NULL, 0 }, // heatParams.heatForceDirection
	{ TYPE_F32, false, (size_t)(&((HeatParams_Type*)0)->thermalConductivity), NULL, 0 }, // heatParams.thermalConductivity
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->useDensity), NULL, 0 }, // useDensity
	{ TYPE_STRUCT, false, (size_t)(&((ParametersStruct*)0)->densityParams), CHILDREN(41), 3 }, // densityParams
	{ TYPE_F32, false, (size_t)(&((DensityParams_Type*)0)->diffusionCoef), NULL, 0 }, // densityParams.diffusionCoef
	{ TYPE_F32, false, (size_t)(&((DensityParams_Type*)0)->densityFieldFade), NULL, 0 }, // densityParams.densityFieldFade
	{ TYPE_U32, false, (size_t)(&((DensityParams_Type*)0)->densityGridMultiplier), NULL, 0 }, // densityParams.densityGridMultiplier
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->isEnabledOptimizedLOD), NULL, 0 }, // isEnabledOptimizedLOD
	{ TYPE_STRUCT, false, (size_t)(&((ParametersStruct*)0)->noiseParams), CHILDREN(44), 4 }, // noiseParams
	{ TYPE_F32, false, (size_t)(&((NoiseParams_Type*)0)->noiseStrength), NULL, 0 }, // noiseParams.noiseStrength
	{ TYPE_VEC3, false, (size_t)(&((NoiseParams_Type*)0)->noiseSpacePeriod), NULL, 0 }, // noiseParams.noiseSpacePeriod
	{ TYPE_F32, false, (size_t)(&((NoiseParams_Type*)0)->noiseTimePeriod), NULL, 0 }, // noiseParams.noiseTimePeriod
	{ TYPE_U32, false, (size_t)(&((NoiseParams_Type*)0)->noiseOctaves), NULL, 0 }, // noiseParams.noiseOctaves
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->dragCoeffForRigidBody), NULL, 0 }, // dragCoeffForRigidBody
	{ TYPE_F32, false, (size_t)(&((ParametersStruct*)0)->fluidViscosity), NULL, 0 }, // fluidViscosity
	{ TYPE_REF, false, (size_t)(&((ParametersStruct*)0)->volumeRenderMaterialName), NULL, 0 }, // volumeRenderMaterialName
	{ TYPE_BOOL, false, (size_t)(&((ParametersStruct*)0)->useFlame), NULL, 0 }, // useFlame
	{ TYPE_STRUCT, false, (size_t)(&((ParametersStruct*)0)->flameParams), CHILDREN(48), 13 }, // flameParams
	{ TYPE_F32, false, (size_t)(&((FlameParams_Type*)0)->IgnitionTemp), NULL, 0 }, // flameParams.IgnitionTemp
	{ TYPE_F32, false, (size_t)(&((FlameParams_Type*)0)->MaxIgnitionTemp), NULL, 0 }, // flameParams.MaxIgnitionTemp
	{ TYPE_F32, false, (size_t)(&((FlameParams_Type*)0)->ReactionSpeed), NULL, 0 }, // flameParams.ReactionSpeed
	{ TYPE_F32, false, (size_t)(&((FlameParams_Type*)0)->HeatReleased), NULL, 0 }, // flameParams.HeatReleased
	{ TYPE_F32, false, (size_t)(&((FlameParams_Type*)0)->DensityEmission), NULL, 0 }, // flameParams.DensityEmission
	{ TYPE_F32, false, (size_t)(&((FlameParams_Type*)0)->FuelInefficiency), NULL, 0 }, // flameParams.FuelInefficiency
	{ TYPE_F32, false, (size_t)(&((FlameParams_Type*)0)->Expansion), NULL, 0 }, // flameParams.Expansion
	{ TYPE_F32, false, (size_t)(&((FlameParams_Type*)0)->Cooling), NULL, 0 }, // flameParams.Cooling
	{ TYPE_F32, false, (size_t)(&((FlameParams_Type*)0)->Buoyancy), NULL, 0 }, // flameParams.Buoyancy
	{ TYPE_VEC3, false, (size_t)(&((FlameParams_Type*)0)->BuoyancyUpVector), NULL, 0 }, // flameParams.BuoyancyUpVector
	{ TYPE_F32, false, (size_t)(&((FlameParams_Type*)0)->RoomTemperature), NULL, 0 }, // flameParams.RoomTemperature
	{ TYPE_VEC4, false, (size_t)(&((FlameParams_Type*)0)->Dissipation), NULL, 0 }, // flameParams.Dissipation
	{ TYPE_U32, false, (size_t)(&((FlameParams_Type*)0)->ResolutionMultiplier), NULL, 0 }, // flameParams.ResolutionMultiplier
	{ TYPE_ENUM, false, (size_t)(&((ParametersStruct*)0)->solverAccuracy), NULL, 0 }, // solverAccuracy
};


bool TurbulenceFSAssetParams_1p5::mBuiltFlag = false;
NvParameterized::MutexType TurbulenceFSAssetParams_1p5::mBuiltFlagMutex;

TurbulenceFSAssetParams_1p5::TurbulenceFSAssetParams_1p5(NvParameterized::Traits* traits, void* buf, int32_t* refCount) :
	NvParameters(traits, buf, refCount)
{
	//mParameterizedTraits->registerFactory(className(), &TurbulenceFSAssetParams_1p5FactoryInst);

	if (!buf) //Do not init data if it is inplace-deserialized
	{
		initDynamicArrays();
		initStrings();
		initReferences();
		initDefaults();
	}
}

TurbulenceFSAssetParams_1p5::~TurbulenceFSAssetParams_1p5()
{
	freeStrings();
	freeReferences();
	freeDynamicArrays();
}

void TurbulenceFSAssetParams_1p5::destroy()
{
	// We cache these fields here to avoid overwrite in destructor
	bool doDeallocateSelf = mDoDeallocateSelf;
	NvParameterized::Traits* traits = mParameterizedTraits;
	int32_t* refCount = mRefCount;
	void* buf = mBuffer;

	this->~TurbulenceFSAssetParams_1p5();

	NvParameters::destroy(this, traits, doDeallocateSelf, refCount, buf);
}

const NvParameterized::DefinitionImpl* TurbulenceFSAssetParams_1p5::getParameterDefinitionTree(void)
{
	if (!mBuiltFlag) // Double-checked lock
	{
		NvParameterized::MutexType::ScopedLock lock(mBuiltFlagMutex);
		if (!mBuiltFlag)
		{
			buildTree();
		}
	}

	return(&ParamDefTable[0]);
}

const NvParameterized::DefinitionImpl* TurbulenceFSAssetParams_1p5::getParameterDefinitionTree(void) const
{
	TurbulenceFSAssetParams_1p5* tmpParam = const_cast<TurbulenceFSAssetParams_1p5*>(this);

	if (!mBuiltFlag) // Double-checked lock
	{
		NvParameterized::MutexType::ScopedLock lock(mBuiltFlagMutex);
		if (!mBuiltFlag)
		{
			tmpParam->buildTree();
		}
	}

	return(&ParamDefTable[0]);
}

NvParameterized::ErrorType TurbulenceFSAssetParams_1p5::getParameterHandle(const char* long_name, Handle& handle) const
{
	ErrorType Ret = NvParameters::getParameterHandle(long_name, handle);
	if (Ret != ERROR_NONE)
	{
		return(Ret);
	}

	size_t offset;
	void* ptr;

	getVarPtr(handle, ptr, offset);

	if (ptr == NULL)
	{
		return(ERROR_INDEX_OUT_OF_RANGE);
	}

	return(ERROR_NONE);
}

NvParameterized::ErrorType TurbulenceFSAssetParams_1p5::getParameterHandle(const char* long_name, Handle& handle)
{
	ErrorType Ret = NvParameters::getParameterHandle(long_name, handle);
	if (Ret != ERROR_NONE)
	{
		return(Ret);
	}

	size_t offset;
	void* ptr;

	getVarPtr(handle, ptr, offset);

	if (ptr == NULL)
	{
		return(ERROR_INDEX_OUT_OF_RANGE);
	}

	return(ERROR_NONE);
}

void TurbulenceFSAssetParams_1p5::getVarPtr(const Handle& handle, void*& ptr, size_t& offset) const
{
	ptr = getVarPtrHelper(&ParamLookupTable[0], const_cast<TurbulenceFSAssetParams_1p5::ParametersStruct*>(&parameters()), handle, offset);
}


/* Dynamic Handle Indices */

void TurbulenceFSAssetParams_1p5::freeParameterDefinitionTable(NvParameterized::Traits* traits)
{
	if (!traits)
	{
		return;
	}

	if (!mBuiltFlag) // Double-checked lock
	{
		return;
	}

	NvParameterized::MutexType::ScopedLock lock(mBuiltFlagMutex);

	if (!mBuiltFlag)
	{
		return;
	}

	for (uint32_t i = 0; i < NumParamDefs; ++i)
	{
		ParamDefTable[i].~DefinitionImpl();
	}

	traits->free(ParamDefTable);

	mBuiltFlag = false;
}

#define PDEF_PTR(index) (&ParamDefTable[index])

void TurbulenceFSAssetParams_1p5::buildTree(void)
{

	uint32_t allocSize = sizeof(NvParameterized::DefinitionImpl) * NumParamDefs;
	ParamDefTable = (NvParameterized::DefinitionImpl*)(mParameterizedTraits->alloc(allocSize));
	memset(ParamDefTable, 0, allocSize);

	for (uint32_t i = 0; i < NumParamDefs; ++i)
	{
		NV_PARAM_PLACEMENT_NEW(ParamDefTable + i, NvParameterized::DefinitionImpl)(*mParameterizedTraits);
	}

	// Initialize DefinitionImpl node: nodeIndex=0, longName=""
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[0];
		ParamDef->init("", TYPE_STRUCT, "STRUCT", true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Contains the asset properties for this Turbulence field sampler.", true);
		ParamDefTable[0].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=1, longName="gridXSize"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[1];
		ParamDef->init("gridXSize", TYPE_ENUM, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Number of grid cells in X dimension.", true);
		ParamDefTable[1].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */

		static const char* const EnumVals[] = { "EGR_12", "EGR_16", "EGR_24", "EGR_32", "EGR_48", "EGR_64", "EGR_96", "EGR_128" };
		ParamDefTable[1].setEnumVals((const char**)EnumVals, 8);




	}

	// Initialize DefinitionImpl node: nodeIndex=2, longName="gridYSize"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[2];
		ParamDef->init("gridYSize", TYPE_ENUM, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Number of grid cells in Y dimension.", true);
		ParamDefTable[2].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */

		static const char* const EnumVals[] = { "EGR_12", "EGR_16", "EGR_24", "EGR_32", "EGR_48", "EGR_64", "EGR_96", "EGR_128" };
		ParamDefTable[2].setEnumVals((const char**)EnumVals, 8);




	}

	// Initialize DefinitionImpl node: nodeIndex=3, longName="gridZSize"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[3];
		ParamDef->init("gridZSize", TYPE_ENUM, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Number of grid cells in Z dimension.", true);
		ParamDefTable[3].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */

		static const char* const EnumVals[] = { "EGR_12", "EGR_16", "EGR_24", "EGR_32", "EGR_48", "EGR_64", "EGR_96", "EGR_128" };
		ParamDefTable[3].setEnumVals((const char**)EnumVals, 8);




	}

	// Initialize DefinitionImpl node: nodeIndex=4, longName="gridSizeWorld"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[4];
		ParamDef->init("gridSizeWorld", TYPE_VEC3, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Size of the grid in world space.", true);
		ParamDefTable[4].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=5, longName="updatesPerFrame"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[5];
		ParamDef->init("updatesPerFrame", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", uint64_t(1), true);
		HintTable[1].init("min", uint64_t(0), true);
		ParamDefTable[5].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[3];
		static Hint* HintPtrTable[3] = { &HintTable[0], &HintTable[1], &HintTable[2], };
		HintTable[0].init("max", uint64_t(1), true);
		HintTable[1].init("min", uint64_t(0), true);
		HintTable[2].init("shortDescription", "The number of updates per frame. See APEX documentation for limitations.", true);
		ParamDefTable[5].setHints((const NvParameterized::Hint**)HintPtrTable, 3);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=6, longName="angularVelocityMultiplier"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[6];
		ParamDef->init("angularVelocityMultiplier", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "a multiplier for the angular velocity set by the user.", true);
		ParamDefTable[6].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=7, longName="angularVelocityClamp"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[7];
		ParamDef->init("angularVelocityClamp", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "a clamp for the angular velocity set by the user.", true);
		ParamDefTable[7].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=8, longName="linearVelocityMultiplier"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[8];
		ParamDef->init("linearVelocityMultiplier", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "a multiplier for the linear velocity set by the user.", true);
		ParamDefTable[8].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=9, longName="linearVelocityClamp"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[9];
		ParamDef->init("linearVelocityClamp", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "a clamp for the linear velocity set by the user.", true);
		ParamDefTable[9].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=10, longName="velocityFieldFadeTime"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[10];
		ParamDef->init("velocityFieldFadeTime", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", uint64_t(1000), true);
		HintTable[1].init("min", uint64_t(0), true);
		ParamDefTable[10].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[3];
		static Hint* HintPtrTable[3] = { &HintTable[0], &HintTable[1], &HintTable[2], };
		HintTable[0].init("max", uint64_t(1000), true);
		HintTable[1].init("min", uint64_t(0), true);
		HintTable[2].init("shortDescription", "Time of velocity field cleaning process [sec]. Cleaning disabled by default.", true);
		ParamDefTable[10].setHints((const NvParameterized::Hint**)HintPtrTable, 3);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=11, longName="velocityFieldFadeDelay"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[11];
		ParamDef->init("velocityFieldFadeDelay", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", uint64_t(1000), true);
		HintTable[1].init("min", uint64_t(0), true);
		ParamDefTable[11].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[3];
		static Hint* HintPtrTable[3] = { &HintTable[0], &HintTable[1], &HintTable[2], };
		HintTable[0].init("max", uint64_t(1000), true);
		HintTable[1].init("min", uint64_t(0), true);
		HintTable[2].init("shortDescription", "Time without activity before velocity field cleaning process starts [sec]. ", true);
		ParamDefTable[11].setHints((const NvParameterized::Hint**)HintPtrTable, 3);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=12, longName="velocityFieldFadeIntensity"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[12];
		ParamDef->init("velocityFieldFadeIntensity", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", uint64_t(1), true);
		HintTable[1].init("min", double(0.01), true);
		ParamDefTable[12].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[3];
		static Hint* HintPtrTable[3] = { &HintTable[0], &HintTable[1], &HintTable[2], };
		HintTable[0].init("max", uint64_t(1), true);
		HintTable[1].init("min", double(0.01), true);
		HintTable[2].init("shortDescription", "This parameter sets how much each velocity vector should be damped, so (1 - velocityFieldFadeIntensity) of original velocity vector magnitude will be left after the fade process finishes.", true);
		ParamDefTable[12].setHints((const NvParameterized::Hint**)HintPtrTable, 3);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=13, longName="boundaryFadePercentage"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[13];
		ParamDef->init("boundaryFadePercentage", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", uint64_t(1), true);
		HintTable[1].init("min", uint64_t(0), true);
		ParamDefTable[13].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[3];
		static Hint* HintPtrTable[3] = { &HintTable[0], &HintTable[1], &HintTable[2], };
		HintTable[0].init("max", uint64_t(1), true);
		HintTable[1].init("min", uint64_t(0), true);
		HintTable[2].init("shortDescription", "Percentage of distance from boundary to center where fade out starts.", true);
		ParamDefTable[13].setHints((const NvParameterized::Hint**)HintPtrTable, 3);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=14, longName="boundarySizePercentage"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[14];
		ParamDef->init("boundarySizePercentage", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", uint64_t(1), true);
		HintTable[1].init("min", uint64_t(0), true);
		ParamDefTable[14].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[3];
		static Hint* HintPtrTable[3] = { &HintTable[0], &HintTable[1], &HintTable[2], };
		HintTable[0].init("max", uint64_t(1), true);
		HintTable[1].init("min", uint64_t(0), true);
		HintTable[2].init("shortDescription", "Boundary size as the percentage of grid size.", true);
		ParamDefTable[14].setHints((const NvParameterized::Hint**)HintPtrTable, 3);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=15, longName="collisionFilterDataName"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[15];
		ParamDef->init("collisionFilterDataName", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("HIDDEN", uint64_t(1), true);
		ParamDefTable[15].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("HIDDEN", uint64_t(1), true);
		HintTable[1].init("shortDescription", "The filter data (group/groupsMask) name for TurbulenceFS vs PhysX interaction.", true);
		ParamDefTable[15].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=16, longName="fieldBoundaryFilterDataName"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[16];
		ParamDef->init("fieldBoundaryFilterDataName", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("HIDDEN", uint64_t(1), true);
		ParamDefTable[16].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("HIDDEN", uint64_t(1), true);
		HintTable[1].init("shortDescription", "The filter data name for TurbulenceFS vs Field Boundaries interaction.", true);
		ParamDefTable[16].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=17, longName="fieldSamplerFilterDataName"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[17];
		ParamDef->init("fieldSamplerFilterDataName", TYPE_STRING, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "The filter data name for TurbulenceFS vs other Field Samplers interaction.", true);
		ParamDefTable[17].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=18, longName="maxCollidingObjects"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[18];
		ParamDef->init("maxCollidingObjects", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "The maximum number of colliding objects.", true);
		ParamDefTable[18].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=19, longName="maxVelocitySources"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[19];
		ParamDef->init("maxVelocitySources", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "The maximum number of velocity source.", true);
		ParamDefTable[19].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=20, longName="maxHeatSources"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[20];
		ParamDef->init("maxHeatSources", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "The maximum number of heat source.", true);
		ParamDefTable[20].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=21, longName="maxSubstanceSources"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[21];
		ParamDef->init("maxSubstanceSources", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "The maximum number of substance source (computed if density enabled).", true);
		ParamDefTable[21].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=22, longName="dragCoeff"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[22];
		ParamDef->init("dragCoeff", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Coefficient for deriving drag force from velocity (if equals to zero, direct grid velocity is used).", true);
		ParamDefTable[22].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=23, longName="externalVelocity"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[23];
		ParamDef->init("externalVelocity", TYPE_VEC3, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Adds a single directional velocity to the grid.", true);
		ParamDefTable[23].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=24, longName="fieldVelocityMultiplier"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[24];
		ParamDef->init("fieldVelocityMultiplier", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "A multiplier for the field velocity.", true);
		ParamDefTable[24].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=25, longName="fieldVelocityWeight"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[25];
		ParamDef->init("fieldVelocityWeight", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", uint64_t(1), true);
		HintTable[1].init("min", uint64_t(0), true);
		ParamDefTable[25].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[3];
		static Hint* HintPtrTable[3] = { &HintTable[0], &HintTable[1], &HintTable[2], };
		HintTable[0].init("max", uint64_t(1), true);
		HintTable[1].init("min", uint64_t(0), true);
		HintTable[2].init("shortDescription", "The effect of the field velocity on objects. A value of 1 causes objects to only be affected by the grid, a value of 0 allows objects to be controlled by other field samplers.", true);
		ParamDefTable[25].setHints((const NvParameterized::Hint**)HintPtrTable, 3);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=26, longName="useHeat"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[26];
		ParamDef->init("useHeat", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Enable whether or not to use heat in the simulation.", true);
		ParamDefTable[26].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=27, longName="heatParams"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[27];
		ParamDef->init("heatParams", TYPE_STRUCT, "HeatParams", true);






	}

	// Initialize DefinitionImpl node: nodeIndex=28, longName="heatParams.temperatureBasedForceMultiplier"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[28];
		ParamDef->init("temperatureBasedForceMultiplier", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Multiplier for force induced by heat source.", true);
		ParamDefTable[28].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=29, longName="heatParams.ambientTemperature"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[29];
		ParamDef->init("ambientTemperature", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Environment temperature.", true);
		ParamDefTable[29].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=30, longName="heatParams.heatForceDirection"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[30];
		ParamDef->init("heatForceDirection", TYPE_VEC3, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Direction of the force induced by heat source.", true);
		ParamDefTable[30].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=31, longName="heatParams.thermalConductivity"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[31];
		ParamDef->init("thermalConductivity", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Thermal conductivity. Default value is set for air.", true);
		ParamDefTable[31].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=32, longName="useDensity"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[32];
		ParamDef->init("useDensity", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Enable whether or not to use density in the simulation.", true);
		ParamDefTable[32].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=33, longName="densityParams"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[33];
		ParamDef->init("densityParams", TYPE_STRUCT, "DensityParams", true);






	}

	// Initialize DefinitionImpl node: nodeIndex=34, longName="densityParams.diffusionCoef"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[34];
		ParamDef->init("diffusionCoef", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Diffusion coefficient for density (analog for viscosity in velocity equation.", true);
		ParamDefTable[34].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=35, longName="densityParams.densityFieldFade"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[35];
		ParamDef->init("densityFieldFade", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", uint64_t(1), true);
		HintTable[1].init("min", uint64_t(0), true);
		ParamDefTable[35].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[3];
		static Hint* HintPtrTable[3] = { &HintTable[0], &HintTable[1], &HintTable[2], };
		HintTable[0].init("max", uint64_t(1), true);
		HintTable[1].init("min", uint64_t(0), true);
		HintTable[2].init("shortDescription", "Each cell in density field are multiplied by (1 - densityFieldFade) every frame.", true);
		ParamDefTable[35].setHints((const NvParameterized::Hint**)HintPtrTable, 3);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=36, longName="densityParams.densityGridMultiplier"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[36];
		ParamDef->init("densityGridMultiplier", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("min", uint64_t(1), true);
		ParamDefTable[36].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("min", uint64_t(1), true);
		HintTable[1].init("shortDescription", "Density grid resolution multiplier.", true);
		ParamDefTable[36].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=37, longName="isEnabledOptimizedLOD"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[37];
		ParamDef->init("isEnabledOptimizedLOD", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Enable more aggressive LOD.", true);
		ParamDefTable[37].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=38, longName="noiseParams"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[38];
		ParamDef->init("noiseParams", TYPE_STRUCT, "NoiseParams", true);






	}

	// Initialize DefinitionImpl node: nodeIndex=39, longName="noiseParams.noiseStrength"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[39];
		ParamDef->init("noiseStrength", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "The strength of the noise added to the simulation.", true);
		ParamDefTable[39].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=40, longName="noiseParams.noiseSpacePeriod"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[40];
		ParamDef->init("noiseSpacePeriod", TYPE_VEC3, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Noise period in space.", true);
		ParamDefTable[40].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=41, longName="noiseParams.noiseTimePeriod"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[41];
		ParamDef->init("noiseTimePeriod", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Noise time period.", true);
		ParamDefTable[41].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=42, longName="noiseParams.noiseOctaves"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[42];
		ParamDef->init("noiseOctaves", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Number of the noise octaves (more octaves give more turbulent noise, but increase computational time).", true);
		ParamDefTable[42].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=43, longName="dragCoeffForRigidBody"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[43];
		ParamDef->init("dragCoeffForRigidBody", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "It is not true drag coef just mixing coefficient for slip and no-slip boundary condition. If set to zero supposed slip boundary condition on rigid bodies. If set to 1 supposed no-slip boundary condition else mixed (partly slip)", true);
		ParamDefTable[43].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=44, longName="fluidViscosity"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[44];
		ParamDef->init("fluidViscosity", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Viscosity is the coefficient for velocity diffusion. If 0. there is no diffusion.", true);
		ParamDefTable[44].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=45, longName="volumeRenderMaterialName"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[45];
		ParamDef->init("volumeRenderMaterialName", TYPE_REF, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "The optional volume render material name", true);
		ParamDefTable[45].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */


		static const char* const RefVariantVals[] = { "ApexVolumeRenderMaterials" };
		ParamDefTable[45].setRefVariantVals((const char**)RefVariantVals, 1);



	}

	// Initialize DefinitionImpl node: nodeIndex=46, longName="useFlame"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[46];
		ParamDef->init("useFlame", TYPE_BOOL, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Enable whether or not to use flame in the simulation.", true);
		ParamDefTable[46].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=47, longName="flameParams"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[47];
		ParamDef->init("flameParams", TYPE_STRUCT, "FlameParams", true);






	}

	// Initialize DefinitionImpl node: nodeIndex=48, longName="flameParams.IgnitionTemp"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[48];
		ParamDef->init("IgnitionTemp", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("tweakable", uint64_t(1), true);
		ParamDefTable[48].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("shortDescription", "Temperature at which ignition occurs.", true);
		HintTable[1].init("tweakable", uint64_t(1), true);
		ParamDefTable[48].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=49, longName="flameParams.MaxIgnitionTemp"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[49];
		ParamDef->init("MaxIgnitionTemp", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("tweakable", uint64_t(1), true);
		ParamDefTable[49].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("shortDescription", "Maximum temperature at which ignition occurs.", true);
		HintTable[1].init("tweakable", uint64_t(1), true);
		ParamDefTable[49].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=50, longName="flameParams.ReactionSpeed"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[50];
		ParamDef->init("ReactionSpeed", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("tweakable", uint64_t(1), true);
		ParamDefTable[50].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("shortDescription", "Speed at which reaction occurs. Higher reaction speeds generate more heat and also consume fuel more quickly.", true);
		HintTable[1].init("tweakable", uint64_t(1), true);
		ParamDefTable[50].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=51, longName="flameParams.HeatReleased"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[51];
		ParamDef->init("HeatReleased", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("tweakable", uint64_t(1), true);
		ParamDefTable[51].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("shortDescription", "Amount of temperature released during reaction.", true);
		HintTable[1].init("tweakable", uint64_t(1), true);
		ParamDefTable[51].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=52, longName="flameParams.DensityEmission"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[52];
		ParamDef->init("DensityEmission", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("tweakable", uint64_t(1), true);
		ParamDefTable[52].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("shortDescription", "Amount of density (smoke) created during reaction", true);
		HintTable[1].init("tweakable", uint64_t(1), true);
		ParamDefTable[52].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=53, longName="flameParams.FuelInefficiency"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[53];
		ParamDef->init("FuelInefficiency", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[3];
		static Hint* HintPtrTable[3] = { &HintTable[0], &HintTable[1], &HintTable[2], };
		HintTable[0].init("max", double(1.0), true);
		HintTable[1].init("min", double(0.0), true);
		HintTable[2].init("tweakable", uint64_t(1), true);
		ParamDefTable[53].setHints((const NvParameterized::Hint**)HintPtrTable, 3);

#else

		static HintImpl HintTable[4];
		static Hint* HintPtrTable[4] = { &HintTable[0], &HintTable[1], &HintTable[2], &HintTable[3], };
		HintTable[0].init("max", double(1.0), true);
		HintTable[1].init("min", double(0.0), true);
		HintTable[2].init("shortDescription", " Controls how much of the burned fuel is actually not burned [0, 1]", true);
		HintTable[3].init("tweakable", uint64_t(1), true);
		ParamDefTable[53].setHints((const NvParameterized::Hint**)HintPtrTable, 4);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=54, longName="flameParams.Expansion"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[54];
		ParamDef->init("Expansion", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("tweakable", uint64_t(1), true);
		ParamDefTable[54].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("shortDescription", "Amount of expansion generated by reaction.", true);
		HintTable[1].init("tweakable", uint64_t(1), true);
		ParamDefTable[54].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=55, longName="flameParams.Cooling"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[55];
		ParamDef->init("Cooling", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("tweakable", uint64_t(1), true);
		ParamDefTable[55].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("shortDescription", "Exponential cooling amount", true);
		HintTable[1].init("tweakable", uint64_t(1), true);
		ParamDefTable[55].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=56, longName="flameParams.Buoyancy"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[56];
		ParamDef->init("Buoyancy", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("tweakable", uint64_t(1), true);
		ParamDefTable[56].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("shortDescription", "Buoyancy strength. If temperature is above room temperature, upwards force is generated.", true);
		HintTable[1].init("tweakable", uint64_t(1), true);
		ParamDefTable[56].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=57, longName="flameParams.BuoyancyUpVector"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[57];
		ParamDef->init("BuoyancyUpVector", TYPE_VEC3, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("tweakable", uint64_t(1), true);
		ParamDefTable[57].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("shortDescription", "Direction that buoyancy acts in (opposite gravity)", true);
		HintTable[1].init("tweakable", uint64_t(1), true);
		ParamDefTable[57].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=58, longName="flameParams.RoomTemperature"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[58];
		ParamDef->init("RoomTemperature", TYPE_F32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("tweakable", uint64_t(1), true);
		ParamDefTable[58].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("shortDescription", "Room temperature. Affects buoyancy.", true);
		HintTable[1].init("tweakable", uint64_t(1), true);
		ParamDefTable[58].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=59, longName="flameParams.Dissipation"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[59];
		ParamDef->init("Dissipation", TYPE_VEC4, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("tweakable", uint64_t(1), true);
		ParamDefTable[59].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#else

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("shortDescription", "Amount to dissipate each channel of flame per simulation frame. This is corrected for the timestep.", true);
		HintTable[1].init("tweakable", uint64_t(1), true);
		ParamDefTable[59].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=60, longName="flameParams.ResolutionMultiplier"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[60];
		ParamDef->init("ResolutionMultiplier", TYPE_U32, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

		static HintImpl HintTable[2];
		static Hint* HintPtrTable[2] = { &HintTable[0], &HintTable[1], };
		HintTable[0].init("max", uint64_t(16), true);
		HintTable[1].init("min", uint64_t(1), true);
		ParamDefTable[60].setHints((const NvParameterized::Hint**)HintPtrTable, 2);

#else

		static HintImpl HintTable[3];
		static Hint* HintPtrTable[3] = { &HintTable[0], &HintTable[1], &HintTable[2], };
		HintTable[0].init("max", uint64_t(16), true);
		HintTable[1].init("min", uint64_t(1), true);
		HintTable[2].init("shortDescription", "The flame resolution multiplier", true);
		ParamDefTable[60].setHints((const NvParameterized::Hint**)HintPtrTable, 3);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */





	}

	// Initialize DefinitionImpl node: nodeIndex=61, longName="solverAccuracy"
	{
		NvParameterized::DefinitionImpl* ParamDef = &ParamDefTable[61];
		ParamDef->init("solverAccuracy", TYPE_ENUM, NULL, true);

#ifdef NV_PARAMETERIZED_HIDE_DESCRIPTIONS

#else

		static HintImpl HintTable[1];
		static Hint* HintPtrTable[1] = { &HintTable[0], };
		HintTable[0].init("shortDescription", "Solver accuracy. Use FAST mode to improve performance, but be aware that it could lead to less accurate and stable simulation!", true);
		ParamDefTable[61].setHints((const NvParameterized::Hint**)HintPtrTable, 1);

#endif /* NV_PARAMETERIZED_HIDE_DESCRIPTIONS */

		static const char* const EnumVals[] = { "NORMAL", "FAST" };
		ParamDefTable[61].setEnumVals((const char**)EnumVals, 2);




	}

	// SetChildren for: nodeIndex=0, longName=""
	{
		static Definition* Children[37];
		Children[0] = PDEF_PTR(1);
		Children[1] = PDEF_PTR(2);
		Children[2] = PDEF_PTR(3);
		Children[3] = PDEF_PTR(4);
		Children[4] = PDEF_PTR(5);
		Children[5] = PDEF_PTR(6);
		Children[6] = PDEF_PTR(7);
		Children[7] = PDEF_PTR(8);
		Children[8] = PDEF_PTR(9);
		Children[9] = PDEF_PTR(10);
		Children[10] = PDEF_PTR(11);
		Children[11] = PDEF_PTR(12);
		Children[12] = PDEF_PTR(13);
		Children[13] = PDEF_PTR(14);
		Children[14] = PDEF_PTR(15);
		Children[15] = PDEF_PTR(16);
		Children[16] = PDEF_PTR(17);
		Children[17] = PDEF_PTR(18);
		Children[18] = PDEF_PTR(19);
		Children[19] = PDEF_PTR(20);
		Children[20] = PDEF_PTR(21);
		Children[21] = PDEF_PTR(22);
		Children[22] = PDEF_PTR(23);
		Children[23] = PDEF_PTR(24);
		Children[24] = PDEF_PTR(25);
		Children[25] = PDEF_PTR(26);
		Children[26] = PDEF_PTR(27);
		Children[27] = PDEF_PTR(32);
		Children[28] = PDEF_PTR(33);
		Children[29] = PDEF_PTR(37);
		Children[30] = PDEF_PTR(38);
		Children[31] = PDEF_PTR(43);
		Children[32] = PDEF_PTR(44);
		Children[33] = PDEF_PTR(45);
		Children[34] = PDEF_PTR(46);
		Children[35] = PDEF_PTR(47);
		Children[36] = PDEF_PTR(61);

		ParamDefTable[0].setChildren(Children, 37);
	}

	// SetChildren for: nodeIndex=27, longName="heatParams"
	{
		static Definition* Children[4];
		Children[0] = PDEF_PTR(28);
		Children[1] = PDEF_PTR(29);
		Children[2] = PDEF_PTR(30);
		Children[3] = PDEF_PTR(31);

		ParamDefTable[27].setChildren(Children, 4);
	}

	// SetChildren for: nodeIndex=33, longName="densityParams"
	{
		static Definition* Children[3];
		Children[0] = PDEF_PTR(34);
		Children[1] = PDEF_PTR(35);
		Children[2] = PDEF_PTR(36);

		ParamDefTable[33].setChildren(Children, 3);
	}

	// SetChildren for: nodeIndex=38, longName="noiseParams"
	{
		static Definition* Children[4];
		Children[0] = PDEF_PTR(39);
		Children[1] = PDEF_PTR(40);
		Children[2] = PDEF_PTR(41);
		Children[3] = PDEF_PTR(42);

		ParamDefTable[38].setChildren(Children, 4);
	}

	// SetChildren for: nodeIndex=47, longName="flameParams"
	{
		static Definition* Children[13];
		Children[0] = PDEF_PTR(48);
		Children[1] = PDEF_PTR(49);
		Children[2] = PDEF_PTR(50);
		Children[3] = PDEF_PTR(51);
		Children[4] = PDEF_PTR(52);
		Children[5] = PDEF_PTR(53);
		Children[6] = PDEF_PTR(54);
		Children[7] = PDEF_PTR(55);
		Children[8] = PDEF_PTR(56);
		Children[9] = PDEF_PTR(57);
		Children[10] = PDEF_PTR(58);
		Children[11] = PDEF_PTR(59);
		Children[12] = PDEF_PTR(60);

		ParamDefTable[47].setChildren(Children, 13);
	}

	mBuiltFlag = true;

}
void TurbulenceFSAssetParams_1p5::initStrings(void)
{
	collisionFilterDataName.isAllocated = true;
	collisionFilterDataName.buf = NULL;
	fieldBoundaryFilterDataName.isAllocated = true;
	fieldBoundaryFilterDataName.buf = NULL;
	fieldSamplerFilterDataName.isAllocated = true;
	fieldSamplerFilterDataName.buf = NULL;
}

void TurbulenceFSAssetParams_1p5::initDynamicArrays(void)
{
}

void TurbulenceFSAssetParams_1p5::initDefaults(void)
{

	freeStrings();
	freeReferences();
	freeDynamicArrays();
	gridXSize = (const char*)"EGR_16";
	gridYSize = (const char*)"EGR_16";
	gridZSize = (const char*)"EGR_16";
	gridSizeWorld = physx::PxVec3(init(12, 12, 12));
	updatesPerFrame = float(1);
	angularVelocityMultiplier = float(1);
	angularVelocityClamp = float(1000000);
	linearVelocityMultiplier = float(1);
	linearVelocityClamp = float(1000000);
	velocityFieldFadeTime = float(0);
	velocityFieldFadeDelay = float(2);
	velocityFieldFadeIntensity = float(0.995);
	boundaryFadePercentage = float(0.1);
	boundarySizePercentage = float(1);
	maxCollidingObjects = uint32_t(32);
	maxVelocitySources = uint32_t(8);
	maxHeatSources = uint32_t(8);
	maxSubstanceSources = uint32_t(8);
	dragCoeff = float(0);
	externalVelocity = physx::PxVec3(init(0.0, 0.0, 0.0));
	fieldVelocityMultiplier = float(1);
	fieldVelocityWeight = float(1);
	useHeat = bool(false);
	heatParams.temperatureBasedForceMultiplier = float(0.02);
	heatParams.ambientTemperature = float(0);
	heatParams.heatForceDirection = physx::PxVec3(init(0.0, 1.0, 0.0));
	heatParams.thermalConductivity = float(0.025);
	useDensity = bool(false);
	densityParams.diffusionCoef = float(0);
	densityParams.densityFieldFade = float(0);
	densityParams.densityGridMultiplier = uint32_t(1);
	isEnabledOptimizedLOD = bool(false);
	noiseParams.noiseStrength = float(0);
	noiseParams.noiseSpacePeriod = physx::PxVec3(init(1.0, 1.0, 1.0));
	noiseParams.noiseTimePeriod = float(1);
	noiseParams.noiseOctaves = uint32_t(1);
	dragCoeffForRigidBody = float(0);
	fluidViscosity = float(0);
	useFlame = bool(false);
	flameParams.IgnitionTemp = float(0.0);
	flameParams.MaxIgnitionTemp = float(1.0);
	flameParams.ReactionSpeed = float(0.2);
	flameParams.HeatReleased = float(0.5);
	flameParams.DensityEmission = float(0.0);
	flameParams.FuelInefficiency = float(0.0);
	flameParams.Expansion = float(0.5);
	flameParams.Cooling = float(0.0);
	flameParams.Buoyancy = float(0.2);
	flameParams.BuoyancyUpVector = physx::PxVec3(init(0.0,0.0,0.0));
	flameParams.RoomTemperature = float(0.0);
	flameParams.Dissipation = physx::PxVec4(initVec4(0.1,0.1,0.1,0.1));
	flameParams.ResolutionMultiplier = uint32_t(1);
	solverAccuracy = (const char*)"NORMAL";

	initDynamicArrays();
	initStrings();
	initReferences();
}

void TurbulenceFSAssetParams_1p5::initReferences(void)
{
	volumeRenderMaterialName = NULL;

}

void TurbulenceFSAssetParams_1p5::freeDynamicArrays(void)
{
}

void TurbulenceFSAssetParams_1p5::freeStrings(void)
{

	if (collisionFilterDataName.isAllocated && collisionFilterDataName.buf)
	{
		mParameterizedTraits->strfree((char*)collisionFilterDataName.buf);
	}

	if (fieldBoundaryFilterDataName.isAllocated && fieldBoundaryFilterDataName.buf)
	{
		mParameterizedTraits->strfree((char*)fieldBoundaryFilterDataName.buf);
	}

	if (fieldSamplerFilterDataName.isAllocated && fieldSamplerFilterDataName.buf)
	{
		mParameterizedTraits->strfree((char*)fieldSamplerFilterDataName.buf);
	}
}

void TurbulenceFSAssetParams_1p5::freeReferences(void)
{
	if (volumeRenderMaterialName)
	{
		volumeRenderMaterialName->destroy();
	}

}

} // namespace parameterized
} // namespace nvidia
